{"ast":null,"code":"var _jsxFileName = \"/home/denner/Documentos/WebDevelopment/trybe-projects/project-starwars-datatable-hooks/sd-07-project-starwars-datatable-hooks/src/context/Provider.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarsContext from './StarWarsContext';\nimport fetchPlanets from '../services/fetchPlanetsAPI';\n\nfunction Provider(props) {\n  const initialNumber = 0;\n  const [data, setData] = useState([{\n    teste: 'só testando'\n  }]);\n  const [textInputValue, setTextInputValue] = useState('');\n  const [columnValue, setColumnValue] = useState('population');\n  const [comparisonValue, setComparisonValue] = useState('maior que');\n  const [numberValue, setNumberValue] = useState(initialNumber);\n  const [filteredData, setFilteredData] = useState([]);\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: ''\n    },\n    filterByNumericValues: []\n  });\n  const atualFilter = {\n    column: columnValue,\n    comparison: comparisonValue,\n    value: numberValue\n  };\n  useEffect(() => {\n    fetchPlanets().then(response => setData(response.results));\n  }, []);\n  useEffect(() => {\n    setFilteredData(data);\n  }, [data]);\n\n  const filterByName = value => {\n    const arrayToFilter = [...data];\n    const filteredArray = arrayToFilter.filter(item => item.name.toLowerCase().includes(value));\n    setFilteredData(filteredArray);\n  };\n\n  const handleTextChange = event => {\n    const {\n      target\n    } = event;\n    const {\n      value\n    } = target;\n    setTextInputValue(value);\n    setFilters({ ...filters,\n      filterByName: {\n        name: value\n      }\n    });\n    filterByName(value.toLowerCase());\n  };\n\n  const handleColumnChange = event => {\n    const {\n      target\n    } = event;\n    const {\n      value\n    } = target;\n    setColumnValue(value);\n    atualFilter.column = value;\n  };\n\n  const handleComparisonChange = event => {\n    const {\n      target\n    } = event;\n    const {\n      value\n    } = target;\n    setComparisonValue(value);\n    atualFilter.comparison = value;\n  };\n\n  const handleNumberChange = event => {\n    const {\n      target\n    } = event;\n    const {\n      value\n    } = target;\n    setNumberValue(value);\n    atualFilter.value = value;\n  };\n\n  const filterByNumber = () => {\n    const arrayToFilter = [...data];\n    const {\n      filterByNumericValues\n    } = filters;\n    const {\n      column,\n      comparison,\n      value\n    } = filterByNumericValues[0];\n    let filteredArray = [];\n\n    switch (comparison) {\n      case 'maior que':\n        filteredArray = arrayToFilter.filter(item => parseInt(item[column], 10) > parseInt(value, 10));\n        break;\n\n      case 'menor que':\n        filteredArray = arrayToFilter.filter(item => parseInt(item[column], 10) < parseInt(value, 10));\n        break;\n\n      default:\n        filteredArray = arrayToFilter.filter(item => parseInt(item[column], 10) === parseInt(value, 10));\n        break;\n    }\n\n    setFilteredData(filteredArray);\n  };\n\n  const handleFilterClick = () => {\n    setFilters({ ...filters,\n      filterByNumericValues: [...filterByNumericValues, atualFilter]\n    });\n    filterByNumber();\n  };\n\n  useEffect(() => {\n    setFilters({ ...filters,\n      filterByNumericValues: [{\n        column: columnValue,\n        comparison: comparisonValue,\n        value: numberValue\n      }]\n    });\n  }, [columnValue, comparisonValue, filters, numberValue]);\n  const context = {\n    data,\n    filters,\n    textInputValue,\n    filteredData,\n    columnValue,\n    comparisonValue,\n    numberValue,\n    handleColumnChange,\n    handleComparisonChange,\n    handleNumberChange,\n    handleFilterClick,\n    handleTextChange\n  };\n  const {\n    children\n  } = props;\n  return /*#__PURE__*/React.createElement(StarWarsContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default Provider;","map":{"version":3,"sources":["/home/denner/Documentos/WebDevelopment/trybe-projects/project-starwars-datatable-hooks/sd-07-project-starwars-datatable-hooks/src/context/Provider.js"],"names":["React","useState","useEffect","PropTypes","StarWarsContext","fetchPlanets","Provider","props","initialNumber","data","setData","teste","textInputValue","setTextInputValue","columnValue","setColumnValue","comparisonValue","setComparisonValue","numberValue","setNumberValue","filteredData","setFilteredData","filters","setFilters","filterByName","name","filterByNumericValues","atualFilter","column","comparison","value","then","response","results","arrayToFilter","filteredArray","filter","item","toLowerCase","includes","handleTextChange","event","target","handleColumnChange","handleComparisonChange","handleNumberChange","filterByNumber","parseInt","handleFilterClick","context","children","propTypes","node","isRequired"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarsContext from './StarWarsContext';\nimport fetchPlanets from '../services/fetchPlanetsAPI';\n\nfunction Provider(props) {\n  const initialNumber = 0;\n  const [data, setData] = useState([{ teste: 'só testando' }]);\n  const [textInputValue, setTextInputValue] = useState('');\n  const [columnValue, setColumnValue] = useState('population');\n  const [comparisonValue, setComparisonValue] = useState('maior que');\n  const [numberValue, setNumberValue] = useState(initialNumber);\n  const [filteredData, setFilteredData] = useState([]);\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: '',\n    },\n    filterByNumericValues: [],\n  });\n\n  const atualFilter = {\n    column: columnValue,\n    comparison: comparisonValue,\n    value: numberValue,\n  };\n\n  useEffect(() => {\n    fetchPlanets().then((response) => setData(response.results));\n  }, []);\n\n  useEffect(() => {\n    setFilteredData(data);\n  }, [data]);\n\n  const filterByName = (value) => {\n    const arrayToFilter = [...data];\n    const filteredArray = arrayToFilter.filter((item) => (\n      item.name.toLowerCase().includes(value)\n    ));\n    setFilteredData(filteredArray);\n  };\n\n  const handleTextChange = (event) => {\n    const { target } = event;\n    const { value } = target;\n    setTextInputValue(value);\n    setFilters({\n      ...filters,\n      filterByName: {\n        name: value,\n      },\n    });\n    filterByName(value.toLowerCase());\n  };\n\n  const handleColumnChange = (event) => {\n    const { target } = event;\n    const { value } = target;\n    setColumnValue(value);\n    atualFilter.column = value;\n  };\n\n  const handleComparisonChange = (event) => {\n    const { target } = event;\n    const { value } = target;\n    setComparisonValue(value);\n    atualFilter.comparison = value;\n  };\n\n  const handleNumberChange = (event) => {\n    const { target } = event;\n    const { value } = target;\n    setNumberValue(value);\n    atualFilter.value = value;\n  };\n\n  const filterByNumber = () => {\n    const arrayToFilter = [...data];\n    const { filterByNumericValues } = filters;\n    const { column, comparison, value } = filterByNumericValues[0];\n    let filteredArray = [];\n    switch (comparison) {\n    case 'maior que':\n      filteredArray = arrayToFilter.filter(\n        (item) => parseInt(item[column], 10) > parseInt(value, 10),\n      );\n      break;\n    case 'menor que':\n      filteredArray = arrayToFilter.filter(\n        (item) => parseInt(item[column], 10) < parseInt(value, 10),\n      );\n      break;\n    default:\n      filteredArray = arrayToFilter.filter(\n        (item) => parseInt(item[column], 10) === parseInt(value, 10),\n      );\n      break;\n    }\n    setFilteredData(filteredArray);\n  };\n\n  const handleFilterClick = () => {\n    setFilters({\n      ...filters,\n      filterByNumericValues: [...filterByNumericValues, atualFilter],\n    });\n    filterByNumber();\n  };\n\n  useEffect(() => {\n    setFilters({\n      ...filters,\n      filterByNumericValues: [\n        {\n          column: columnValue,\n          comparison: comparisonValue,\n          value: numberValue,\n        }],\n    });\n  }, [columnValue, comparisonValue, filters, numberValue]);\n\n  const context = {\n    data,\n    filters,\n    textInputValue,\n    filteredData,\n    columnValue,\n    comparisonValue,\n    numberValue,\n    handleColumnChange,\n    handleComparisonChange,\n    handleNumberChange,\n    handleFilterClick,\n    handleTextChange,\n  };\n  const { children } = props;\n  return (\n    <StarWarsContext.Provider value={ context }>\n      {children}\n    </StarWarsContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}