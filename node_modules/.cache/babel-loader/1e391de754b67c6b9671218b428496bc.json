{"ast":null,"code":"var _jsxFileName = \"/home/denner/Documentos/WebDevelopment/trybe-projects/project-starwars-datatable-hooks/sd-07-project-starwars-datatable-hooks/src/context/Provider.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarsContext from './StarWarsContext';\nimport fetchPlanets from '../services/fetchPlanetsAPI';\n\nfunction Provider(props) {\n  const [data, setData] = useState([{\n    teste: 'só testando'\n  }]);\n  const [textInputValue, setTextInputValue] = useState('');\n  const [filteredData, setFilteredData] = useState([]);\n  const [filters, setFilters] = useState({\n    filters: {\n      filterByName: {\n        name: ''\n      }\n    }\n  });\n  useEffect(() => {\n    fetchPlanets().then(response => setData(response.results));\n  }, []);\n  useEffect(() => {\n    setFilteredData(data);\n  }, [data]);\n\n  const filterByName = value => {\n    const arrayToFilter = [...data];\n    const filteredArray = arrayToFilter.filter(item => item.name.includes(value));\n    setFilteredData(filteredArray);\n  };\n\n  const handleTextChange = event => {\n    const {\n      target\n    } = event;\n    const {\n      value\n    } = target;\n    setTextInputValue(value);\n    setFilters({ ...filters,\n      filterByName: {\n        name: value\n      }\n    });\n    filterByName(value);\n  };\n\n  const context = {\n    data,\n    filters,\n    textInputValue,\n    filteredData,\n    handleTextChange\n  };\n  const {\n    children\n  } = props;\n  return /*#__PURE__*/React.createElement(StarWarsContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default Provider;","map":{"version":3,"sources":["/home/denner/Documentos/WebDevelopment/trybe-projects/project-starwars-datatable-hooks/sd-07-project-starwars-datatable-hooks/src/context/Provider.js"],"names":["React","useState","useEffect","PropTypes","StarWarsContext","fetchPlanets","Provider","props","data","setData","teste","textInputValue","setTextInputValue","filteredData","setFilteredData","filters","setFilters","filterByName","name","then","response","results","value","arrayToFilter","filteredArray","filter","item","includes","handleTextChange","event","target","context","children","propTypes","node","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,YAAP,MAAyB,6BAAzB;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,CAAC;AAAES,IAAAA,KAAK,EAAE;AAAT,GAAD,CAAD,CAAhC;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCX,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACY,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC;AACrCc,IAAAA,OAAO,EAAE;AACPE,MAAAA,YAAY,EAAE;AACZC,QAAAA,IAAI,EAAE;AADM;AADP;AAD4B,GAAD,CAAtC;AAQAhB,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,YAAY,GAAGc,IAAf,CAAqBC,QAAD,IAAcX,OAAO,CAACW,QAAQ,CAACC,OAAV,CAAzC;AACD,GAFQ,EAEN,EAFM,CAAT;AAIAnB,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,eAAe,CAACN,IAAD,CAAf;AACD,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;;AAIA,QAAMS,YAAY,GAAIK,KAAD,IAAW;AAC9B,UAAMC,aAAa,GAAG,CAAC,GAAGf,IAAJ,CAAtB;AACA,UAAMgB,aAAa,GAAGD,aAAa,CAACE,MAAd,CAAsBC,IAAD,IAAUA,IAAI,CAACR,IAAL,CAAUS,QAAV,CAAmBL,KAAnB,CAA/B,CAAtB;AACAR,IAAAA,eAAe,CAACU,aAAD,CAAf;AACD,GAJD;;AAMA,QAAMI,gBAAgB,GAAIC,KAAD,IAAW;AAClC,UAAM;AAAEC,MAAAA;AAAF,QAAaD,KAAnB;AACA,UAAM;AAAEP,MAAAA;AAAF,QAAYQ,MAAlB;AACAlB,IAAAA,iBAAiB,CAACU,KAAD,CAAjB;AACAN,IAAAA,UAAU,CAAC,EACT,GAAGD,OADM;AAETE,MAAAA,YAAY,EAAE;AACZC,QAAAA,IAAI,EAAEI;AADM;AAFL,KAAD,CAAV;AAMAL,IAAAA,YAAY,CAACK,KAAD,CAAZ;AACD,GAXD;;AAaA,QAAMS,OAAO,GAAG;AACdvB,IAAAA,IADc;AAEdO,IAAAA,OAFc;AAGdJ,IAAAA,cAHc;AAIdE,IAAAA,YAJc;AAKde,IAAAA;AALc,GAAhB;AAOA,QAAM;AAAEI,IAAAA;AAAF,MAAezB,KAArB;AACA,sBACE,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAGwB,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,QADH,CADF;AAKD;;AAED1B,QAAQ,CAAC2B,SAAT,GAAqB;AACnBD,EAAAA,QAAQ,EAAE7B,SAAS,CAAC+B,IAAV,CAAeC;AADN,CAArB;AAIA,eAAe7B,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarsContext from './StarWarsContext';\nimport fetchPlanets from '../services/fetchPlanetsAPI';\n\nfunction Provider(props) {\n  const [data, setData] = useState([{ teste: 'só testando' }]);\n  const [textInputValue, setTextInputValue] = useState('');\n  const [filteredData, setFilteredData] = useState([]);\n  const [filters, setFilters] = useState({\n    filters: {\n      filterByName: {\n        name: '',\n      },\n    },\n  });\n\n  useEffect(() => {\n    fetchPlanets().then((response) => setData(response.results));\n  }, []);\n\n  useEffect(() => {\n    setFilteredData(data);\n  }, [data]);\n\n  const filterByName = (value) => {\n    const arrayToFilter = [...data];\n    const filteredArray = arrayToFilter.filter((item) => item.name.includes(value));\n    setFilteredData(filteredArray);\n  };\n\n  const handleTextChange = (event) => {\n    const { target } = event;\n    const { value } = target;\n    setTextInputValue(value);\n    setFilters({\n      ...filters,\n      filterByName: {\n        name: value,\n      },\n    });\n    filterByName(value);\n  };\n\n  const context = {\n    data,\n    filters,\n    textInputValue,\n    filteredData,\n    handleTextChange,\n  };\n  const { children } = props;\n  return (\n    <StarWarsContext.Provider value={ context }>\n      {children}\n    </StarWarsContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}