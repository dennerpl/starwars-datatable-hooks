{"ast":null,"code":"var _jsxFileName = \"/home/denner/Documentos/WebDevelopment/trybe-projects/project-starwars-datatable-hooks/sd-07-project-starwars-datatable-hooks/src/context/Provider.js\";\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarsContext from './StarWarsContext';\nimport fetchPlanets from '../services/fetchPlanetsAPI';\n\nfunction Provider(props) {\n  const initialNumber = 0;\n  const [data, setData] = useState([{\n    teste: 'só testando'\n  }]);\n  const [textInputValue, setTextInputValue] = useState('');\n  const [columnValue, setColumnValue] = useState('population');\n  const [comparisonValue, setComparisonValue] = useState('maior que');\n  const [numberValue, setNumberValue] = useState(initialNumber);\n  const [filteredData, setFilteredData] = useState([]);\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: ''\n    },\n    filterByNumericValues: [{\n      column: columnValue,\n      comparison: comparisonValue,\n      valueInput: numberValue\n    }]\n  });\n  useEffect(() => {\n    fetchPlanets().then(response => setData(response.results));\n  }, []);\n  useEffect(() => {\n    setFilteredData(data);\n  }, [data]);\n\n  const filterByName = value => {\n    const arrayToFilter = [...data];\n    const filteredArray = arrayToFilter.filter(item => item.name.toLowerCase().includes(value));\n    setFilteredData(filteredArray);\n  };\n\n  const handleTextChange = event => {\n    const {\n      target\n    } = event;\n    const {\n      value\n    } = target;\n    setTextInputValue(value);\n    setFilters({ ...filters,\n      filterByName: {\n        name: value\n      }\n    });\n    filterByName(value.toLowerCase());\n  };\n\n  const handleColumnChange = event => {\n    const {\n      target\n    } = event;\n    const {\n      value\n    } = target; // console.log(value);\n    // setColumnValue(value);\n    // console.log(columnValue);\n\n    setFilters({ ...filters,\n      filterByNumericValues: [{\n        column: value,\n        comparison: comparisonValue,\n        valueInput: numberValue\n      }]\n    });\n  };\n\n  const handleComparisonChange = event => {\n    const {\n      target\n    } = event;\n    const {\n      value\n    } = target; // setComparisonValue(value);\n\n    setFilters({ ...filters,\n      filterByNumericValues: [{\n        column: columnValue,\n        comparison: value,\n        valueInput: numberValue\n      }]\n    });\n  };\n\n  const handleNumberChange = event => {\n    const {\n      target\n    } = event;\n    const {\n      value\n    } = target; // setNumberValue(value);\n\n    setFilters({ ...filters,\n      filterByNumericValues: [{\n        column: columnValue,\n        comparison: comparisonValue,\n        valueInput: value\n      }]\n    });\n  };\n\n  const filterByNumber = () => {\n    const arrayToFilter = [...data];\n    const {\n      filterByNumericValues\n    } = filters;\n    const {\n      column,\n      comparison,\n      value\n    } = filterByNumericValues[0];\n    let filteredArray = [];\n\n    switch (comparison) {\n      case 'maior que':\n        filteredArray = arrayToFilter.filter(item => item[column] > value);\n        break;\n\n      case 'menor que':\n        filteredArray = arrayToFilter.filter(item => item[column] < value);\n        break;\n\n      default:\n        filteredArray = arrayToFilter.filter(item => item[column] === value);\n        break;\n    }\n\n    setFilteredData(filteredArray);\n  };\n\n  const handleFilterClick = () => {\n    setFilters({ ...filters,\n      filterByNumericValues: [{\n        column: columnValue,\n        comparison: comparisonValue,\n        valueInput: numberValue\n      }]\n    });\n    filterByNumber();\n  };\n\n  const context = {\n    data,\n    filters,\n    textInputValue,\n    filteredData,\n    columnValue,\n    comparisonValue,\n    numberValue,\n    handleColumnChange,\n    handleComparisonChange,\n    handleNumberChange,\n    handleFilterClick,\n    handleTextChange\n  };\n  const {\n    children\n  } = props;\n  return /*#__PURE__*/React.createElement(StarWarsContext.Provider, {\n    value: context,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};\nexport default Provider;","map":{"version":3,"sources":["/home/denner/Documentos/WebDevelopment/trybe-projects/project-starwars-datatable-hooks/sd-07-project-starwars-datatable-hooks/src/context/Provider.js"],"names":["React","useState","useEffect","PropTypes","StarWarsContext","fetchPlanets","Provider","props","initialNumber","data","setData","teste","textInputValue","setTextInputValue","columnValue","setColumnValue","comparisonValue","setComparisonValue","numberValue","setNumberValue","filteredData","setFilteredData","filters","setFilters","filterByName","name","filterByNumericValues","column","comparison","valueInput","then","response","results","value","arrayToFilter","filteredArray","filter","item","toLowerCase","includes","handleTextChange","event","target","handleColumnChange","handleComparisonChange","handleNumberChange","filterByNumber","handleFilterClick","context","children","propTypes","node","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,YAAP,MAAyB,6BAAzB;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,QAAMC,aAAa,GAAG,CAAtB;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,CAAC;AAAEU,IAAAA,KAAK,EAAE;AAAT,GAAD,CAAD,CAAhC;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCZ,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCd,QAAQ,CAAC,YAAD,CAA9C;AACA,QAAM,CAACe,eAAD,EAAkBC,kBAAlB,IAAwChB,QAAQ,CAAC,WAAD,CAAtD;AACA,QAAM,CAACiB,WAAD,EAAcC,cAAd,IAAgClB,QAAQ,CAACO,aAAD,CAA9C;AACA,QAAM,CAACY,YAAD,EAAeC,eAAf,IAAkCpB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACqB,OAAD,EAAUC,UAAV,IAAwBtB,QAAQ,CAAC;AACrCuB,IAAAA,YAAY,EAAE;AACZC,MAAAA,IAAI,EAAE;AADM,KADuB;AAIrCC,IAAAA,qBAAqB,EAAE,CACrB;AACEC,MAAAA,MAAM,EAAEb,WADV;AAEEc,MAAAA,UAAU,EAAEZ,eAFd;AAGEa,MAAAA,UAAU,EAAEX;AAHd,KADqB;AAJc,GAAD,CAAtC;AAaAhB,EAAAA,SAAS,CAAC,MAAM;AACdG,IAAAA,YAAY,GAAGyB,IAAf,CAAqBC,QAAD,IAAcrB,OAAO,CAACqB,QAAQ,CAACC,OAAV,CAAzC;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA9B,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,eAAe,CAACZ,IAAD,CAAf;AACD,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;;AAIA,QAAMe,YAAY,GAAIS,KAAD,IAAW;AAC9B,UAAMC,aAAa,GAAG,CAAC,GAAGzB,IAAJ,CAAtB;AACA,UAAM0B,aAAa,GAAGD,aAAa,CAACE,MAAd,CAAsBC,IAAD,IACzCA,IAAI,CAACZ,IAAL,CAAUa,WAAV,GAAwBC,QAAxB,CAAiCN,KAAjC,CADoB,CAAtB;AAGAZ,IAAAA,eAAe,CAACc,aAAD,CAAf;AACD,GAND;;AAQA,QAAMK,gBAAgB,GAAIC,KAAD,IAAW;AAClC,UAAM;AAAEC,MAAAA;AAAF,QAAaD,KAAnB;AACA,UAAM;AAAER,MAAAA;AAAF,QAAYS,MAAlB;AACA7B,IAAAA,iBAAiB,CAACoB,KAAD,CAAjB;AACAV,IAAAA,UAAU,CAAC,EACT,GAAGD,OADM;AAETE,MAAAA,YAAY,EAAE;AACZC,QAAAA,IAAI,EAAEQ;AADM;AAFL,KAAD,CAAV;AAMAT,IAAAA,YAAY,CAACS,KAAK,CAACK,WAAN,EAAD,CAAZ;AACD,GAXD;;AAaA,QAAMK,kBAAkB,GAAIF,KAAD,IAAW;AACpC,UAAM;AAAEC,MAAAA;AAAF,QAAaD,KAAnB;AACA,UAAM;AAAER,MAAAA;AAAF,QAAYS,MAAlB,CAFoC,CAGpC;AACA;AACA;;AACAnB,IAAAA,UAAU,CAAC,EACT,GAAGD,OADM;AAETI,MAAAA,qBAAqB,EAAE,CACrB;AACEC,QAAAA,MAAM,EAAEM,KADV;AAEEL,QAAAA,UAAU,EAAEZ,eAFd;AAGEa,QAAAA,UAAU,EAAEX;AAHd,OADqB;AAFd,KAAD,CAAV;AASD,GAfD;;AAiBA,QAAM0B,sBAAsB,GAAIH,KAAD,IAAW;AACxC,UAAM;AAAEC,MAAAA;AAAF,QAAaD,KAAnB;AACA,UAAM;AAAER,MAAAA;AAAF,QAAYS,MAAlB,CAFwC,CAGxC;;AACAnB,IAAAA,UAAU,CAAC,EACT,GAAGD,OADM;AAETI,MAAAA,qBAAqB,EAAE,CACrB;AACEC,QAAAA,MAAM,EAAEb,WADV;AAEEc,QAAAA,UAAU,EAAEK,KAFd;AAGEJ,QAAAA,UAAU,EAAEX;AAHd,OADqB;AAFd,KAAD,CAAV;AASD,GAbD;;AAeA,QAAM2B,kBAAkB,GAAIJ,KAAD,IAAW;AACpC,UAAM;AAAEC,MAAAA;AAAF,QAAaD,KAAnB;AACA,UAAM;AAAER,MAAAA;AAAF,QAAYS,MAAlB,CAFoC,CAGpC;;AACAnB,IAAAA,UAAU,CAAC,EACT,GAAGD,OADM;AAETI,MAAAA,qBAAqB,EAAE,CACrB;AACEC,QAAAA,MAAM,EAAEb,WADV;AAEEc,QAAAA,UAAU,EAAEZ,eAFd;AAGEa,QAAAA,UAAU,EAAEI;AAHd,OADqB;AAFd,KAAD,CAAV;AASD,GAbD;;AAeA,QAAMa,cAAc,GAAG,MAAM;AAC3B,UAAMZ,aAAa,GAAG,CAAC,GAAGzB,IAAJ,CAAtB;AACA,UAAM;AAAEiB,MAAAA;AAAF,QAA4BJ,OAAlC;AACA,UAAM;AAAEK,MAAAA,MAAF;AAAUC,MAAAA,UAAV;AAAsBK,MAAAA;AAAtB,QAAgCP,qBAAqB,CAAC,CAAD,CAA3D;AACA,QAAIS,aAAa,GAAG,EAApB;;AACA,YAAQP,UAAR;AACA,WAAK,WAAL;AACEO,QAAAA,aAAa,GAAGD,aAAa,CAACE,MAAd,CAAsBC,IAAD,IAAUA,IAAI,CAACV,MAAD,CAAJ,GAAeM,KAA9C,CAAhB;AACA;;AACF,WAAK,WAAL;AACEE,QAAAA,aAAa,GAAGD,aAAa,CAACE,MAAd,CAAsBC,IAAD,IAAUA,IAAI,CAACV,MAAD,CAAJ,GAAeM,KAA9C,CAAhB;AACA;;AACF;AACEE,QAAAA,aAAa,GAAGD,aAAa,CAACE,MAAd,CAAsBC,IAAD,IAAUA,IAAI,CAACV,MAAD,CAAJ,KAAiBM,KAAhD,CAAhB;AACA;AATF;;AAWAZ,IAAAA,eAAe,CAACc,aAAD,CAAf;AACD,GAjBD;;AAmBA,QAAMY,iBAAiB,GAAG,MAAM;AAC9BxB,IAAAA,UAAU,CAAC,EACT,GAAGD,OADM;AAETI,MAAAA,qBAAqB,EAAE,CACrB;AACEC,QAAAA,MAAM,EAAEb,WADV;AAEEc,QAAAA,UAAU,EAAEZ,eAFd;AAGEa,QAAAA,UAAU,EAAEX;AAHd,OADqB;AAFd,KAAD,CAAV;AASA4B,IAAAA,cAAc;AACf,GAXD;;AAaA,QAAME,OAAO,GAAG;AACdvC,IAAAA,IADc;AAEda,IAAAA,OAFc;AAGdV,IAAAA,cAHc;AAIdQ,IAAAA,YAJc;AAKdN,IAAAA,WALc;AAMdE,IAAAA,eANc;AAOdE,IAAAA,WAPc;AAQdyB,IAAAA,kBARc;AASdC,IAAAA,sBATc;AAUdC,IAAAA,kBAVc;AAWdE,IAAAA,iBAXc;AAYdP,IAAAA;AAZc,GAAhB;AAcA,QAAM;AAAES,IAAAA;AAAF,MAAe1C,KAArB;AACA,sBACE,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAGyC,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,QADH,CADF;AAKD;;AAED3C,QAAQ,CAAC4C,SAAT,GAAqB;AACnBD,EAAAA,QAAQ,EAAE9C,SAAS,CAACgD,IAAV,CAAeC;AADN,CAArB;AAIA,eAAe9C,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarsContext from './StarWarsContext';\nimport fetchPlanets from '../services/fetchPlanetsAPI';\n\nfunction Provider(props) {\n  const initialNumber = 0;\n  const [data, setData] = useState([{ teste: 'só testando' }]);\n  const [textInputValue, setTextInputValue] = useState('');\n  const [columnValue, setColumnValue] = useState('population');\n  const [comparisonValue, setComparisonValue] = useState('maior que');\n  const [numberValue, setNumberValue] = useState(initialNumber);\n  const [filteredData, setFilteredData] = useState([]);\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: '',\n    },\n    filterByNumericValues: [\n      {\n        column: columnValue,\n        comparison: comparisonValue,\n        valueInput: numberValue,\n      },\n    ],\n  });\n\n  useEffect(() => {\n    fetchPlanets().then((response) => setData(response.results));\n  }, []);\n\n  useEffect(() => {\n    setFilteredData(data);\n  }, [data]);\n\n  const filterByName = (value) => {\n    const arrayToFilter = [...data];\n    const filteredArray = arrayToFilter.filter((item) => (\n      item.name.toLowerCase().includes(value)\n    ));\n    setFilteredData(filteredArray);\n  };\n\n  const handleTextChange = (event) => {\n    const { target } = event;\n    const { value } = target;\n    setTextInputValue(value);\n    setFilters({\n      ...filters,\n      filterByName: {\n        name: value,\n      },\n    });\n    filterByName(value.toLowerCase());\n  };\n\n  const handleColumnChange = (event) => {\n    const { target } = event;\n    const { value } = target;\n    // console.log(value);\n    // setColumnValue(value);\n    // console.log(columnValue);\n    setFilters({\n      ...filters,\n      filterByNumericValues: [\n        {\n          column: value,\n          comparison: comparisonValue,\n          valueInput: numberValue,\n        }],\n    });\n  };\n\n  const handleComparisonChange = (event) => {\n    const { target } = event;\n    const { value } = target;\n    // setComparisonValue(value);\n    setFilters({\n      ...filters,\n      filterByNumericValues: [\n        {\n          column: columnValue,\n          comparison: value,\n          valueInput: numberValue,\n        }],\n    });\n  };\n\n  const handleNumberChange = (event) => {\n    const { target } = event;\n    const { value } = target;\n    // setNumberValue(value);\n    setFilters({\n      ...filters,\n      filterByNumericValues: [\n        {\n          column: columnValue,\n          comparison: comparisonValue,\n          valueInput: value,\n        }],\n    });\n  };\n\n  const filterByNumber = () => {\n    const arrayToFilter = [...data];\n    const { filterByNumericValues } = filters;\n    const { column, comparison, value } = filterByNumericValues[0];\n    let filteredArray = [];\n    switch (comparison) {\n    case 'maior que':\n      filteredArray = arrayToFilter.filter((item) => item[column] > value);\n      break;\n    case 'menor que':\n      filteredArray = arrayToFilter.filter((item) => item[column] < value);\n      break;\n    default:\n      filteredArray = arrayToFilter.filter((item) => item[column] === value);\n      break;\n    }\n    setFilteredData(filteredArray);\n  };\n\n  const handleFilterClick = () => {\n    setFilters({\n      ...filters,\n      filterByNumericValues: [\n        {\n          column: columnValue,\n          comparison: comparisonValue,\n          valueInput: numberValue,\n        }],\n    });\n    filterByNumber();\n  };\n\n  const context = {\n    data,\n    filters,\n    textInputValue,\n    filteredData,\n    columnValue,\n    comparisonValue,\n    numberValue,\n    handleColumnChange,\n    handleComparisonChange,\n    handleNumberChange,\n    handleFilterClick,\n    handleTextChange,\n  };\n  const { children } = props;\n  return (\n    <StarWarsContext.Provider value={ context }>\n      {children}\n    </StarWarsContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}