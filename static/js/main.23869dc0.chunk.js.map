{"version":3,"sources":["context/StarWarsContext.js","services/fetchPlanetsAPI.js","context/Provider.js","components/TableHead.js","components/TableBody.js","components/Table.js","components/FiltersForm.js","App.js","index.js"],"names":["StarWarsContext","createContext","fetchPlanets","fetch","then","response","json","ok","Promise","resolve","reject","Provider","props","useState","teste","data","setData","textInputValue","setTextInputValue","columnValue","setColumnValue","comparisonValue","setComparisonValue","numberValue","setNumberValue","filteredData","setFilteredData","filterByName","name","filterByNumericValues","column","comparison","value","filters","setFilters","useEffect","results","handleColumnChange","event","a","target","console","log","context","handleComparisonChange","handleNumberChange","handleFilterClick","arrayToFilter","filteredArray","filter","item","parseInt","filterByNumber","handleTextChange","toLowerCase","includes","handleResetClick","resetedArray","children","Table","useContext","arrayOfKeys","Object","keys","itemToFilter","map","key","TableBody","line","index","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","created","edited","url","border","TableHead","FiltersForm","htmlFor","id","type","placeholder","data-testid","onChange","onClick","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.23869dc0.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst StarWarsContext = createContext();\n\nexport default StarWarsContext;\n","const api = 'https://swapi-trybe.herokuapp.com/api/planets/?format=json';\nconst fetchPlanets = () => (\n  fetch(api)\n    .then((response) => (\n      response\n        .json()\n        .then((json) => (response.ok ? Promise.resolve(json) : Promise.reject(json)))\n    ))\n);\n\nexport default fetchPlanets;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport StarWarsContext from './StarWarsContext';\nimport fetchPlanets from '../services/fetchPlanetsAPI';\n\nfunction Provider(props) {\n  const initialNumber = 0;\n  const [data, setData] = useState([{ teste: 'sÃ³ testando' }]);\n  const [textInputValue, setTextInputValue] = useState('');\n  const [columnValue, setColumnValue] = useState('population');\n  const [comparisonValue, setComparisonValue] = useState('maior que');\n  const [numberValue, setNumberValue] = useState(initialNumber);\n  const [filteredData, setFilteredData] = useState([]);\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: '',\n    },\n    filterByNumericValues: [\n      {\n        column: columnValue,\n        comparison: comparisonValue,\n        value: numberValue,\n      },\n    ],\n  });\n\n  useEffect(() => {\n    fetchPlanets().then((response) => setData(response.results));\n  }, []);\n\n  useEffect(() => {\n    setFilteredData(data);\n  }, [data]);\n\n  const filterByName = (value) => {\n    const arrayToFilter = [...data];\n    const filteredArray = arrayToFilter.filter((item) => (\n      item.name.toLowerCase().includes(value)\n    ));\n    setFilteredData(filteredArray);\n  };\n\n  const handleTextChange = (event) => {\n    const { target } = event;\n    const { value } = target;\n    setTextInputValue(value);\n    setFilters({\n      ...filters,\n      filterByName: {\n        name: value,\n      },\n    });\n    filterByName(value.toLowerCase());\n  };\n\n  const handleColumnChange = async (event) => {\n    const { target } = event;\n    const { value } = target;\n    console.log(value);\n    await setColumnValue(value);\n    console.log(columnValue);\n  };\n\n  const handleComparisonChange = (event) => {\n    const { target } = event;\n    const { value } = target;\n    setComparisonValue(value);\n  };\n\n  const handleNumberChange = (event) => {\n    const { target } = event;\n    const { value } = target;\n    setNumberValue(value);\n  };\n\n  const filterByNumber = () => {\n    const arrayToFilter = [...data];\n    const { filterByNumericValues } = filters;\n    const { column, comparison, value } = filterByNumericValues[0];\n    let filteredArray = [];\n    switch (comparison) {\n    case 'maior que':\n      filteredArray = arrayToFilter.filter(\n        (item) => parseInt(item[column], 10) > parseInt(value, 10),\n      );\n      break;\n    case 'menor que':\n      filteredArray = arrayToFilter.filter(\n        (item) => parseInt(item[column], 10) < parseInt(value, 10),\n      );\n      break;\n    default:\n      filteredArray = arrayToFilter.filter(\n        (item) => parseInt(item[column], 10) === parseInt(value, 10),\n      );\n      break;\n    }\n    setFilteredData(filteredArray);\n  };\n\n  const handleFilterClick = () => {\n    setFilters({\n      ...filters,\n      filterByNumericValues: [\n        {\n          column: columnValue,\n          comparison: comparisonValue,\n          value: numberValue,\n        }],\n    });\n    filterByNumber();\n  };\n\n  const handleResetClick = () => {\n    const resetedArray = [...data];\n    setColumnValue('population');\n    setComparisonValue('maior que');\n    setNumberValue(initialNumber);\n    setFilteredData(resetedArray);\n  };\n\n  useEffect(() => {\n    setFilters({\n      filterByNumericValues: [\n        {\n          column: columnValue,\n          comparison: comparisonValue,\n          value: numberValue,\n        }],\n    });\n  }, [columnValue, comparisonValue, numberValue]);\n\n  const context = {\n    data,\n    filters,\n    textInputValue,\n    filteredData,\n    columnValue,\n    comparisonValue,\n    numberValue,\n    handleColumnChange,\n    handleComparisonChange,\n    handleNumberChange,\n    handleFilterClick,\n    handleTextChange,\n    handleResetClick,\n  };\n  const { children } = props;\n  return (\n    <StarWarsContext.Provider value={ context }>\n      {children}\n    </StarWarsContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Provider;\n","import React, { useContext } from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\n\nfunction Table() {\n  const { data } = useContext(StarWarsContext);\n  const arrayOfKeys = Object.keys(data[0]);\n  return (\n    <thead>\n      <tr>\n        {arrayOfKeys\n          .filter((itemToFilter) => itemToFilter !== 'residents')\n          .map((item) => (\n            <th key={ item }>{item}</th>\n          ))}\n      </tr>\n    </thead>\n  );\n}\n\nexport default Table;\n","import React, { useContext } from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\n\nfunction TableBody() {\n  const { filteredData } = useContext(StarWarsContext);\n  return (\n    <tbody>\n      {filteredData.map((line, index) => (\n        <tr key={ index }>\n          <td>{line.name}</td>\n          <td>{line.rotation_period}</td>\n          <td>{line.orbital_period}</td>\n          <td>{line.diameter}</td>\n          <td>{line.climate}</td>\n          <td>{line.gravity}</td>\n          <td>{line.terrain}</td>\n          <td>{line.surface_water}</td>\n          <td>{line.population}</td>\n          <td>{line.films}</td>\n          <td>{line.created}</td>\n          <td>{line.edited}</td>\n          <td>{line.url}</td>\n        </tr>))}\n    </tbody>\n  );\n}\n\nexport default TableBody;\n","import React from 'react';\nimport TableHead from './TableHead';\nimport TableBody from './TableBody';\n\nfunction Table() {\n  return (\n    <table border=\"1\">\n      <TableHead />\n      <TableBody />\n    </table>\n  );\n}\n\nexport default Table;\n","import React, { useContext } from 'react';\nimport StarWarsContext from '../context/StarWarsContext';\n\nfunction FiltersForm() {\n  const {\n    handleTextChange,\n    textInputValue,\n    columnValue,\n    comparisonValue,\n    numberValue,\n    handleColumnChange,\n    handleComparisonChange,\n    handleNumberChange,\n    handleFilterClick,\n    handleResetClick,\n  } = useContext(StarWarsContext);\n  return (\n    <form>\n      <label htmlFor=\"textFilter\">\n        Filter by text\n        <input\n          id=\"textFilter\"\n          type=\"text\"\n          placeholder=\"Search something\"\n          data-testid=\"name-filter\"\n          value={ textInputValue }\n          onChange={ handleTextChange }\n        />\n      </label>\n      <label htmlFor=\"select\">\n        Column\n        <select\n          id=\"select\"\n          data-testid=\"column-filter\"\n          value={ columnValue }\n          onChange={ handleColumnChange }\n        >\n          <option value=\"population\">population</option>\n          <option value=\"orbital_period\">orbital_period</option>\n          <option value=\"diameter\">diameter</option>\n          <option value=\"rotation_period\">rotation_period</option>\n          <option value=\"surface_water\">surface_water</option>\n        </select>\n      </label>\n      <label htmlFor=\"select\">\n        Comparison filter\n        <select\n          id=\"select\"\n          data-testid=\"comparison-filter\"\n          value={ comparisonValue }\n          onChange={ handleComparisonChange }\n        >\n          <option value=\"maior que\">maior que</option>\n          <option value=\"menor que\">menor que</option>\n          <option value=\"igual a\">igual a</option>\n        </select>\n      </label>\n      <label htmlFor=\"numberFilter\">\n        Number\n        <input\n          id=\"numberFilter\"\n          type=\"number\"\n          placeholder=\"Base number\"\n          data-testid=\"value-filter\"\n          value={ numberValue }\n          onChange={ handleNumberChange }\n        />\n      </label>\n      <button\n        type=\"button\"\n        data-testid=\"button-filter\"\n        onClick={ () => handleFilterClick() }\n      >\n        Teste\n      </button>\n      <div data-testid=\"filter\">\n        <button type=\"button\" onClick={ () => handleResetClick() }>X</button>\n      </div>\n    </form>\n  );\n}\n\nexport default FiltersForm;\n","import React from 'react';\nimport './App.css';\nimport Provider from './context/Provider';\nimport Table from './components/Table';\nimport FiltersForm from './components/FiltersForm';\n\nfunction App() {\n  return (\n    <Provider>\n      <FiltersForm />\n      <Table />\n    </Provider>\n  );\n}\n\nexport default App;\n\n// {/* <table>\n//         <thead>\n//           <tr>\n//             <th>DescriÃ§Ã£o</th>\n//             <th>Tag</th>\n//             <th>MÃ©todo de pagamento</th>\n//             <th>Valor</th>\n//             <th>Moeda</th>\n//             <th>CÃ¢mbio utilizado</th>\n//             <th>Valor convertido</th>\n//             <th>Moeda de conversÃ£o</th>\n//             <th>Editar/Excluir</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           <tr>\n//             <td>Teste 1</td>\n//             <td>teste 2</td>\n//             <td>teste 3</td>\n//             <td>teste 4</td>\n//             {/* <td>{ exchangeRates[currency].name }</td>\n//         <td>{ parseFloat(exchangeRates[currency].ask).toFixed(2) }</td>\n//         <td>{ parseFloat(value) * parseFloat(exchangeRates[currency].ask) }</td> */}\n//             <td>Real</td>\n//             <td>\n//               <button\n//                 type=\"button\"\n//                 data-testid=\"delete-btn\"\n//                 // onClick={ () => deleteExpense(id) }\n//               >\n//                 Deletar\n//               </button>\n//             </td>\n//           </tr>\n//           {/* { expenses.map((expense) => this.renderElements(expense)) } */}\n//         </tbody>\n//       </table> */}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}